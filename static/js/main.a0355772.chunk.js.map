{"version":3,"sources":["components/header/header.tsx","web3/index.ts","opensea/index.ts","components/nft-card/card-display.tsx","components/nft-card/nft-card.tsx","components/gallery/gallery.tsx","components/footer/footer.tsx","nft-items/showcase.ts","nft-items/gallery.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Root","styled","div","HeaderContents","Logo","AppHeader","showModal","loggedIn","mode","defaultSelectedKeys","Item","to","onClick","web3client","Web3","seaport","OpenSeaPort","currentProvider","networkName","Network","Main","ImageContainer","InfoContainer","Name","Contract","CardDisplay","cardInfo","handleClick","buttonIsLoading","imageUrl","name","assetContract","orders","src","alt","type","loading","basePrice","c","Card","Loading","LoadingText","NftCard","tokenAddress","tokenId","accountAddress","useState","setCardInfo","setButtonIsLoading","useEffect","fetchAsset","a","api","getAsset","asset","console","log","message","includes","setTimeout","notification","error","description","price","createBuyOrder","toString","startAmount","offer","info","createdTime","LoadingOutlined","style","fontSize","spin","HeroBackground","HeroContent","CardContainer","Gallery","nftList","title","subtitle","chunkedList","reduce","resultArray","item","index","chunkIndex","Math","floor","push","map","list","j","nft","i","FooterContent","AppFooter","Date","getFullYear","href","SHOWCASE_NFTS","GALLERY_NFTS","CLIENT_ID","App","isModalVisible","setIsModalVisible","setAccountAddress","googleUser","setGoogleUser","callback","onError","window","addEventListener","windowEth","ethereum","windowWeb3","web3","enable","provider","providers","HttpProvider","enableEthereum","client","eth","getAccounts","accounts","length","add","e","path","visible","onOk","onCancel","clientId","buttonText","onLogoutSuccess","onSuccess","res","code","onFailure","cookiePolicy","marginTop","isSignedIn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0355772.chunk.js","sourcesContent":["import React from \"react\";\nimport { Menu } from \"antd\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst Root = styled.div``;\nconst HeaderContents = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Logo = styled.div`\n  font-family: \"Abril Fatface\", cursive;\n  text-align: center;\n  margin-left: 30px;\n  font-size: 24px;\n  padding-top: 5px;\n  color: #292633;\n`;\n\ninterface Props {\n  showModal: () => void;\n  loggedIn: boolean;\n}\n\nexport const AppHeader: React.FC<Props> = ({ showModal, loggedIn }) => {\n  return (\n    <Root>\n      <HeaderContents>\n        <Logo>Logo</Logo>\n        <Menu mode=\"horizontal\" defaultSelectedKeys={[\"1\"]}>\n          <Menu.Item key=\"1\">\n            <Link to=\"/\">Home</Link>\n          </Menu.Item>\n          <Menu.Item key=\"2\">\n            <Link to=\"/gallery\">Gallery</Link>\n          </Menu.Item>\n          <Menu.Item key=\"3\" onClick={showModal}>\n            {loggedIn ? \"Sign out\" : \"Sign in\"}\n          </Menu.Item>\n        </Menu>\n      </HeaderContents>\n    </Root>\n  );\n};\n","import Web3 from \"web3\";\n\nexport const web3client = new Web3(\n  \"wss://mainnet.infura.io/ws/v3/b0f0d58b5f004a39a331e73519a9a0bf\"\n);\n","import { OpenSeaPort, Network } from \"opensea-js\";\nimport { web3client } from \"../web3\";\n\nexport const seaport = new OpenSeaPort(web3client.currentProvider, {\n  networkName: Network.Main,\n});\n","import { Button } from \"antd\";\nimport { OpenSeaAsset } from \"opensea-js/lib/types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  text-align: center;\n`;\n\nconst ImageContainer = styled.div`\n  img {\n    margin: 0 auto;\n  }\n`;\n\nconst InfoContainer = styled.div``;\n\nconst Name = styled.div`\n  font-family: \"Abril Fatface\", cursive;\n  font-size: 20px;\n`;\n\nconst Contract = styled.div`\n  font-size: 10px;\n  padding-bottom: 8px;\n`;\n\ninterface Props {\n  cardInfo: OpenSeaAsset;\n  handleClick: () => void;\n  buttonIsLoading: boolean;\n}\nexport const CardDisplay: React.FC<Props> = ({\n  cardInfo,\n  handleClick,\n  buttonIsLoading,\n}) => {\n  const { imageUrl, name, assetContract, orders } = cardInfo;\n  return (\n    <Root>\n      <ImageContainer>\n        <img src={imageUrl} alt={name} />\n      </ImageContainer>\n      <InfoContainer>\n        <Name>{name}</Name>\n        <Contract> {assetContract.name}</Contract>\n\n        <Button onClick={handleClick} type=\"primary\" loading={buttonIsLoading}>\n          Buy for Ξ {orders && (orders[0].basePrice.c as any) / 10000}\n        </Button>\n      </InfoContainer>\n    </Root>\n  );\n};\n","import { notification } from \"antd\";\nimport { OpenSeaAsset } from \"opensea-js/lib/types\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { seaport } from \"../../opensea\";\nimport { CardDisplay } from \"./card-display\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\n\nconst Card = styled.div`\n  box-shadow: 0 14px 28px rgba(90, 90, 90, 0.1),\n    0 10px 10px rgba(90, 90, 90, 0.1);\n  background: white;\n  padding: 20px;\n  margin: 20px;\n  height: 400px;\n  min-width: 280px;\n  border-radius: 8px;\n\n  &:hover {\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.1), 0 10px 10px rgba(0, 0, 0, 0.1);\n  }\n`;\n\nconst Loading = styled.div`\n  padding-top: 120px;\n  text-align: center;\n`;\n\nconst LoadingText = styled.div`\n  padding-top: 9px;\n`;\n\ninterface Props {\n  tokenAddress: string;\n  tokenId: number;\n  loggedIn: boolean;\n  showModal: () => void;\n  accountAddress: string | null;\n}\n\nexport const NftCard: React.FC<Props> = ({\n  tokenAddress,\n  tokenId,\n  loggedIn,\n  showModal,\n  accountAddress,\n}) => {\n  const [cardInfo, setCardInfo] = useState<OpenSeaAsset | null>(null);\n  const [buttonIsLoading, setButtonIsLoading] = useState<boolean>(false);\n  useEffect(() => {\n    const fetchAsset = async () => {\n      try {\n        const asset: OpenSeaAsset = await seaport.api.getAsset({\n          tokenAddress,\n          tokenId,\n        });\n        console.log(asset);\n        setCardInfo(asset);\n      } catch (e) {\n        console.log(e.message);\n        if (e.message.includes(\"Request was throttled\")) {\n          // backoff and wait 2s\n          setTimeout(fetchAsset, 2000);\n        }\n      }\n    };\n    fetchAsset();\n  }, [tokenAddress, tokenId]);\n\n  const handleClick = async () => {\n    setButtonIsLoading(true);\n    if (!loggedIn) {\n      showModal();\n      setButtonIsLoading(false);\n      return;\n    }\n\n    if (!accountAddress) {\n      notification.error({\n        message: \"Error making offer\",\n        description: \"No account detected. Please try refreshing your window\",\n      });\n      setButtonIsLoading(false);\n      return;\n    }\n\n    if (!cardInfo && cardInfo!.orders) {\n      notification.error({\n        message: \"Error making offer\",\n        description: \"Error getting card info\",\n      });\n      setButtonIsLoading(false);\n      return;\n    }\n    const price = (cardInfo!.orders![0].basePrice.c as any) / 10000;\n\n    try {\n      const offer = await seaport.createBuyOrder({\n        asset: {\n          tokenId: tokenId.toString(),\n          tokenAddress,\n        },\n        accountAddress: accountAddress!,\n        // Value of the offer, in units of the payment token (or wrapped ETH if none is specified):\n        startAmount: price,\n      });\n\n      notification.info({\n        message: \"Order placed\",\n        description: offer.createdTime,\n      });\n      setButtonIsLoading(false);\n    } catch (e) {\n      notification.error({\n        message: \"Error making offer\",\n        description: e.message,\n      });\n      setButtonIsLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      {cardInfo ? (\n        <CardDisplay\n          handleClick={handleClick}\n          cardInfo={cardInfo}\n          buttonIsLoading={buttonIsLoading}\n        />\n      ) : (\n        <Loading>\n          <LoadingOutlined style={{ fontSize: 24 }} spin />\n          <LoadingText>Loading...</LoadingText>\n        </Loading>\n      )}\n    </Card>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { NFT } from \"../../types\";\nimport { NftCard } from \"../nft-card\";\n\nconst Root = styled.div`\n  flex: 1;\n  h1 {\n    font-family: \"Abril Fatface\", cursive;\n    font-size: 45px;\n    margin: 0;\n    color: #292633;\n  }\n  h2 {\n    color: #292633;\n  }\n`;\n\nconst HeroBackground = styled.div`\n  background: #efefef;\n  height: 400px;\n  background: linear-gradient(-45deg, #ee7752, #e73c7e, #986dcf, #23d5ab);\n  background-size: 400% 400%;\n  animation: gradient 15s ease infinite;\n  @keyframes gradient {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n`;\n\nconst HeroContent = styled.div`\n  padding-top: 90px;\n  padding-bottom: 70px;\n  padding-left: 20px;\n  max-width: 960px;\n  margin: 0 auto;\n`;\n\nconst CardContainer = styled.div`\n  padding-top: 10px;\n  padding-bottom: 150px;\n  max-width: 960px;\n  margin: 0 auto;\n  margin-top: -150px;\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n\ninterface Props {\n  showModal: () => void;\n  loggedIn: boolean;\n  accountAddress: string | null;\n  nftList: NFT[];\n  title: string;\n  subtitle?: string;\n}\n\nexport const Gallery: React.FC<Props> = ({\n  showModal,\n  loggedIn,\n  accountAddress,\n  nftList,\n  title,\n  subtitle,\n}) => {\n  // split list into chunks of 3\n  const chunkedList = nftList.reduce((resultArray: NFT[][], item, index) => {\n    const chunkIndex = Math.floor(index / 3);\n    if (!resultArray[chunkIndex]) {\n      resultArray[chunkIndex] = []; // start a new chunk\n    }\n    resultArray[chunkIndex].push(item);\n    return resultArray;\n  }, []);\n\n  return (\n    <Root>\n      <HeroBackground>\n        <HeroContent>\n          <h1>{title}</h1>\n          {subtitle && <h2>{subtitle}</h2>}\n        </HeroContent>\n      </HeroBackground>\n      {chunkedList?.map((list, j) => {\n        return (\n          <CardContainer key={j}>\n            {list.map((nft, i) => {\n              return (\n                <NftCard\n                  key={i}\n                  tokenAddress={nft.tokenAddress}\n                  tokenId={nft.tokenId}\n                  loggedIn={loggedIn}\n                  showModal={showModal}\n                  accountAddress={accountAddress}\n                />\n              );\n            })}\n          </CardContainer>\n        );\n      })}\n    </Root>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Root = styled.div`\n  height: 130px;\n  background: #f6f6f6;\n`;\nconst FooterContent = styled.div`\n  padding: 20px;\n  max-width: 960px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n\n  a {\n    color: #666;\n  }\n`;\n\nexport const AppFooter = () => {\n  return (\n    <Root>\n      <FooterContent>\n        <div>&#169; Wavy NFT {new Date().getFullYear()}</div>\n        <div>\n          <a href=\"mailto:someone@yoursite.com\">contact@email.com</a>{\" \"}\n        </div>\n      </FooterContent>\n    </Root>\n  );\n};\n","import { NFT } from \"../types\";\n\nexport const SHOWCASE_NFTS: NFT[] = [\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 525788,\n  },\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 528768,\n  },\n  {\n    tokenAddress: \"0xc2c747e0f7004f9e8817db2ca4997657a7746928\",\n    tokenId: 2160,\n  },\n];\n","import { NFT } from \"../types\";\n\nexport const GALLERY_NFTS: NFT[] = [\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 526135,\n  },\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 525788,\n  },\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 528768,\n  },\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 525788,\n  },\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 528768,\n  },\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 526135,\n  },\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 526135,\n  },\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 525788,\n  },\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 528768,\n  },\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 525788,\n  },\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 528768,\n  },\n  {\n    tokenAddress: \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n    tokenId: 526135,\n  },\n];\n","import React, { useEffect, useState } from \"react\";\nimport {\n  GoogleLogin,\n  GoogleLoginResponse,\n  GoogleLoginResponseOffline,\n  GoogleLogout,\n} from \"react-google-login\";\nimport { AppHeader } from \"./header\";\nimport styled from \"styled-components\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Gallery } from \"./gallery\";\nimport Web3 from \"web3\";\nimport { notification } from \"antd\";\nimport { AppFooter } from \"./footer\";\nimport { GALLERY_NFTS, SHOWCASE_NFTS } from \"../nft-items\";\n\nconst CLIENT_ID =\n  \"181331400120-nch2h7c8b7ca3ks2pnsia3jkjgvefk0e.apps.googleusercontent.com\";\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nfunction App() {\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\n  const [accountAddress, setAccountAddress] = useState<string | null>(null);\n  const [googleUser, setGoogleUser] = useState<GoogleLoginResponse | null>(\n    null\n  );\n\n  useEffect(() => {\n    const enableEthereum = async (\n      callback: (w: Web3) => void,\n      onError: (e: string) => void\n    ) => {\n      window.addEventListener(\"load\", async () => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        // @ts-ignore\n        const windowEth = window.ethereum;\n        // @ts-ignore\n        const windowWeb3 = window.web3;\n\n        if (windowEth) {\n          const web3 = new Web3(windowEth);\n\n          try {\n            // Request account access if needed\n            await windowEth.enable();\n            // Acccounts now exposed\n            callback(web3);\n          } catch (error) {\n            onError(error);\n          }\n        }\n        // Legacy dapp browsers...\n        else if (windowWeb3) {\n          // Use Mist/MetaMask's provider.\n          const web3 = windowWeb3;\n          callback(web3);\n        }\n        // Fallback to localhost; use dev console port by default...\n        else {\n          const provider = new Web3.providers.HttpProvider(\n            \"http://mainnet.infura.io/ws/v3/b0f0d58b5f004a39a331e73519a9a0bf\"\n          );\n          const web3 = new Web3(provider);\n          console.log(\"No web3 instance injected, using Local web3.\");\n          callback(web3);\n        }\n      });\n    };\n    enableEthereum(\n      async (client) => {\n        console.log(\"Web3 client enabled\");\n        const accounts = await client.eth.getAccounts();\n\n        if (!accounts.length) {\n          notification.error({\n            message: \"Web3 error\",\n            description: \"No eth accounts detected\",\n          });\n          return;\n        }\n        const add = accounts[0];\n        setAccountAddress(add);\n        console.log(add);\n      },\n      (e: string) => {\n        notification.error({\n          message: \"Web3 error\",\n          description: e,\n        });\n        return;\n      }\n    );\n  }, []);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const onLoginSuccess = (\n    res: GoogleLoginResponse | GoogleLoginResponseOffline\n  ) => {\n    if (res.code) {\n      setGoogleUser(null);\n      return;\n    }\n    const response = res as GoogleLoginResponse;\n    setGoogleUser(response);\n  };\n  const onLogoutSuccess = () => {\n    notification.info({\n      message: \"Logged out\",\n    });\n  };\n\n  const onFailure = (res: any) => {\n    console.error(res);\n    // notification.error({\n    //   message: \"Google auth error\",\n    //   description: `${res}`,\n    // });\n  };\n  return (\n    <Router>\n      <Root>\n        <AppHeader showModal={showModal} loggedIn={googleUser !== null} />\n        <Switch>\n          <Route path=\"/gallery\">\n            <Gallery\n              accountAddress={accountAddress}\n              showModal={showModal}\n              loggedIn={googleUser !== null}\n              nftList={GALLERY_NFTS}\n              title={\"Gallery\"}\n            />\n          </Route>\n          <Route path=\"/\">\n            <Gallery\n              accountAddress={accountAddress}\n              showModal={showModal}\n              loggedIn={googleUser !== null}\n              nftList={SHOWCASE_NFTS}\n              title={\"Hero title\"}\n              subtitle={\"Subtitle dolor sit amet lorem ipsum\"}\n            />\n          </Route>\n        </Switch>\n        <AppFooter />\n\n        <Modal\n          title=\"You must sign in before purchase\"\n          visible={isModalVisible}\n          onOk={handleOk}\n          onCancel={handleCancel}\n        >\n          <p>Sign in options</p>\n          {googleUser ? (\n            <GoogleLogout\n              clientId={CLIENT_ID}\n              buttonText=\"Logout\"\n              onLogoutSuccess={onLogoutSuccess}\n            />\n          ) : (\n            <GoogleLogin\n              clientId={CLIENT_ID}\n              buttonText=\"Login\"\n              onSuccess={onLoginSuccess}\n              onFailure={onFailure}\n              cookiePolicy={\"single_host_origin\"}\n              style={{ marginTop: \"100px\" }}\n              isSignedIn={true}\n            />\n          )}\n        </Modal>\n      </Root>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}